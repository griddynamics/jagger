<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2012 Grid Dynamics Consulting Services, Inc, All Rights Reserved
  ~ http://www.griddynamics.com
  ~
  ~ This library is free software; you can redistribute it and/or modify it under the terms of
  ~ Apache License; either version 2.0 of the License, or any later version
  ~
  ~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  ~ AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  ~ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  ~ DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
  ~ FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  ~ DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  ~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  ~ CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  ~ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  ~ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-2.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <bean id="emptyQuery" class="com.griddynamics.jagger.invoker.http.HttpQuery">
        <property name="method" value="GET" />
        <property name="clientParams">
            <map>
                <entry key="http.protocol.allow-circular-redirects">
                    <bean class="java.lang.Boolean">
                        <constructor-arg value="false"/>
                    </bean>
                </entry>
                <entry key="http.protocol.max-redirects">
                    <bean class="java.lang.Integer">
                        <constructor-arg value="2"/>
                    </bean>
                </entry>
                <entry key="http.connection-manager.timeout">
                    <bean class="java.lang.Long"><constructor-arg value="5000" /></bean>
                </entry>
                <entry key="http.protocol.max-redirects">
                    <bean class="java.lang.Integer"><constructor-arg value="0" /></bean>
                </entry>
            </map>
        </property>
    </bean>


    <bean id="sleep5msInvoker" class="com.griddynamics.jagger.invoker.QueryPoolScenarioFactory">
        <property name="loadBalancer">
            <bean class="com.griddynamics.jagger.invoker.RoundRobinLoadBalancer">
                <constructor-arg type="java.lang.Iterable">
                    <list>
                        <ref bean="emptyQuery"/>
                    </list>
                </constructor-arg>
                <constructor-arg type="java.lang.Iterable" value="#{endpointConfigurator.getEndpoints('/sleep/5')}">
                </constructor-arg>
            </bean>
        </property>
        <property name="invokerClazz" value="com.griddynamics.jagger.invoker.http.HttpInvoker"/>
    </bean>

    <bean id="sleep10msInvoker" class="com.griddynamics.jagger.invoker.QueryPoolScenarioFactory">
        <property name="loadBalancer">
            <bean class="com.griddynamics.jagger.invoker.RoundRobinLoadBalancer">
                <constructor-arg>
                    <list>
                        <ref bean="emptyQuery"/>
                    </list>
                </constructor-arg>
                <constructor-arg value="#{endpointConfigurator.getEndpoints('/sleep/10')}">
                </constructor-arg>
            </bean>
        </property>
        <property name="invokerClazz" value="com.griddynamics.jagger.invoker.http.HttpInvoker"/>
    </bean>

    <bean id="pulseInvoker" class="com.griddynamics.jagger.invoker.QueryPoolScenarioFactory">
        <property name="loadBalancer">
            <bean class="com.griddynamics.jagger.invoker.RoundRobinLoadBalancer">
                <constructor-arg>
                    <list>
                        <ref bean="emptyQuery"/>
                    </list>
                </constructor-arg>
                <constructor-arg value="#{endpointConfigurator.getEndpoints('/sleep/pulse/30000/500')}">
                </constructor-arg>
            </bean>
        </property>
        <property name="invokerClazz" value="com.griddynamics.jagger.invoker.http.HttpInvoker"/>
    </bean>

    <bean id="sleep50msInvoker" class="com.griddynamics.jagger.invoker.QueryPoolScenarioFactory">
        <property name="loadBalancer">
            <bean class="com.griddynamics.jagger.invoker.RoundRobinLoadBalancer">
                <constructor-arg>
                    <list>
                        <ref bean="emptyQuery"/>
                    </list>
                </constructor-arg>
                <constructor-arg value="#{endpointConfigurator.getEndpoints('/sleep/50')}">
                </constructor-arg>
            </bean>
        </property>
        <property name="invokerClazz" value="com.griddynamics.jagger.invoker.http.HttpInvoker"/>
    </bean>

    <bean id="sleepRandomServiceInvoker" class="com.griddynamics.jagger.invoker.QueryPoolScenarioFactory">
        <property name="loadBalancer">
            <bean class="com.griddynamics.jagger.invoker.RoundRobinLoadBalancer">
                <constructor-arg>
                    <list>
                        <ref bean="emptyQuery"/>
                    </list>
                </constructor-arg>
                <constructor-arg value="#{endpointConfigurator.getEndpoints('/sleep/50-150')}">
                </constructor-arg>
            </bean>
        </property>
        <property name="invokerClazz" value="com.griddynamics.jagger.invoker.http.HttpInvoker"/>
    </bean>

    <bean id="tcpTrafficScenarioFactory" class="com.griddynamics.jagger.invoker.QueryPoolScenarioFactory">
        <property name="loadBalancer">
            <bean class="com.griddynamics.jagger.invoker.RoundRobinLoadBalancer">
                <constructor-arg>
                    <list>
                        <value type="com.griddynamics.jagger.util.Nothing">INSTANCE</value>
                    </list>
                </constructor-arg>
                <constructor-arg>
                    <list>
                        <value>"#{endpointConfigurator.getEndpoint('/sleep/5')}"</value>
                    </list>
                </constructor-arg>
            </bean>
        </property>
        <property name="invokerClazz" value="com.griddynamics.jagger.invoker.http.TcpTrafficInvoker"/>
    </bean>
</beans>
